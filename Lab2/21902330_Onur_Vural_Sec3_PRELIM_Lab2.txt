CS224
Lab No.2
Section No.3
Nurettin Onur Vural
21902330
# ----------------PART 1 START-----------------------------------------------------------------------------------------
# Program with three subprograms for printing, checking the symmetry and finding min-max of a static integer array 
.text
	# try sub1------------------------------------------------------------------------------------------------
	la 	$a0, array # prepare argument 1	
	lw 	$a1, arraySize # prepare argument 2	
	jal	PrintArray
	# try sub2------------------------------------------------------------------------------------------------
	la 	$a0, array # prepare argument 1	
	lw 	$a1, arraySize # prepare argument 2
	jal	CheckSymmetric
	# print if its symmetric or not
	beq	$v0, $zero, asym # check return value
	# Print YES message
	li	$v0, 4
	la	$a0, messageYes
	syscall 
	j next

asym:
	# Print NO message
	li	$v0, 4
	la	$a0, messageNo
	syscall
next:	
	# try sub3------------------------------------------------------------------------------------------------
	la 	$a0, array # prepare argument 1	
	lw 	$a1, arraySize # prepare argument 2
	jal	FindMinMax	

 	li	$t3, -72 # The sentinel value check
	beq	$v0, $t3, fin
	# extract return values from the function $v0, $v1 respectively
	move    $t0, $v0	
	move    $t1, $v1
	
	li	$v0, 1
	move	$a0, $t0
	syscall
	# Print minPrompt
	li	$v0, 4
	la	$a0, minPrompt
	syscall

	li	$v0, 1
	move	$a0, $t1
	syscall
	# Print minPrompt
	li	$v0, 4
	la	$a0, maxPrompt
	syscall

fin:
	# End program
	li	$v0, 10
	syscall				
						
#===========================================================	
#Sub1: Prints the contents of an array.	
# @param $a0 starting ad. of array
# @param $a1 size of array								
PrintArray:
# Allocate memory in stack for registers
	addi	$sp, $sp, -12 # we use 3 $s 
	sw	$s0, 8($sp) # used to hold start address
	sw	$s1, 4($sp) # used to hold array size
	sw	$s2, 0($sp) # used as iterator (i)
	# ---------------------------------------
	
	move	$s0, $a0 # gets starting ad. of array
	move	$s1, $a1 # gets arraySize
	add	$s2, $zero, $zero # i = 0
	j	check

cont:
	# display i'th element
	li $v0, 1
	lw $a0, 0($s0)
	syscall
	
	# print ,
	li $v0, 4
	la $a0, arraySpace
	syscall
	
	addi	$s2, $s2, 1 # i = i + 1
	addi	$s0, $s0, 4 # point to next element (address+4)
check:
	bne	$s2, $s1, cont # i != arraySize
	
# Deallocate/ free memory in stack 
	lw	$s2, 0($sp)
	lw	$s1, 4($sp)
	lw	$s0, 8($sp)
	addi	$sp, $sp, 12

	jr	$ra 	#Return from PrintArray
#===========================================================	

#===========================================================	
#Sub2: Checks if an array is symmetric (returns 1 in $v0 if symmetric, returns 0 otherwise).
# @param $a0 starting ad. of array
# @param $a1 size of array
# @return $v0 1 if symmetric else 0
CheckSymmetric: 
# Allocate memory in stack for registers
	addi	$sp, $sp, -32 # we use 8 $s 
	sw	$s0, 28($sp) # used to hold starting address
	sw	$s1, 24($sp) # used to hold array size
	sw	$s2, 20($sp) # used as iterator (i)
	sw	$s3, 16($sp) # used to hold midpoint required for comparison check
	sw	$s4, 12($sp) # used to hold end address
	sw	$s5, 8($sp)  # used for multiplication
	sw	$s6, 4($sp)  # used to hold the current element of first address pointer
	sw	$s7, 0($sp)  # used to hold the current element of end address pointer/ 2'nd pointer
	
	move	$s0, $a0 # gets starting ad. of array
	move	$s1, $a1 # gets arraySize
	add	$s2, $zero, $zero # i = 0
	
	# find midpoint
	addi	$s3, $zero, 2  
	div	$s1, $s3 # divide by zero to get midpoint
	mflo	$s3 # midpoint stored in $s3
	# -----------
	
	# we need for another pointer pointing last item, in order to do that
	li      $s5, 4
	mult  	$s1, $s5 # multiply arraysize and 4 to get index
	mflo    $s5
	subi	$s5, $s5, 4 # this is because index starts from zero
	# ----------------
	# la $t5, last-1(array) # pointing to last element
	move 	$s4, $s0
	add 	$s4, $s4, $s5	
		
compare:
	beq	$s2, $s3, symmetric # the comparison will proceed until we reach midpoint of array
	# load the values for comparison
	lw 	$s6, 0($s0) 
	lw 	$s7, 0($s4)
	#----------------------------
	bne 	$s6, $s7, asymmetric # if spot the items in symmetric positions are not equal, we exit immediately
	
	addi 	$s0, $s0, 4 # increase first index for next comparison
	subi 	$s4, $s4, 4 # decrease second index for next comparison
	addi 	$s2, $s2, 1 # i++ (THIS INDICATES NO OF KEY COMPARISONS IN ARRAY-which is up to midpoint)		
	j 	compare

symmetric:
	addi	$v0, $zero, 1
	j 	exit
	
asymmetric:
 	add	$v0, $zero, $zero
	j 	exit
	
exit:
# Deallocate/ free memory in stack 
	lw	$s7, 0($sp)
	lw	$s6, 4($sp)
	lw	$s5, 8($sp)
	lw	$s4, 12($sp)
	lw	$s3, 16($sp)
	lw	$s2, 20($sp)
	lw	$s1, 24($sp)
	lw	$s0, 28($sp)
	addi	$sp, $sp, 32		
		
	jr	$ra 	#Return from CheckSymmetric
#===========================================================

#===========================================================	
#Sub3: Finds minimum and maximum elements of an array and returns them, respectively, in $v0 and $v1.
# @param $a0 starting ad. of array
# @param $a1 size of array
# @return $v0 min element ( if empty array put -72 "The Sentinel Value" and print exception message)
# @return $v1 max element ( if empty array put -72 "The Sentinel Value" and print exception message)
FindMinMax:
# Allocate memory in stack for s registers
	addi	$sp, $sp, -24
	sw	$s0, 20($sp) # used to hold start address
	sw	$s1, 16($sp) # used to hold size
	sw	$s2, 12($sp) # used as iterator (i)
	sw	$s3, 8($sp)  # used to hold min value
	sw	$s4, 4($sp)  # used to hold max value
	sw	$s5, 0($sp)  # used to track current item of array for comparison
	

	move	$s0, $a0 # gets starting ad. of array
	move	$s1, $a1 # gets arraySize
	beq	$s1, $zero, emptyArray # THE EXCEPTION CASE CHECK
	add	$s2, $zero, $zero # i = 0
	lw	$s3, 0($s0) # For min: $s3 = array[0]
	lw	$s4, 0($s0) # For max: $s4 = array[0]	
	add	$s5, $zero, $zero # temp register

while:
	beq	$s2, $s1, complete
	
	lw 	$s5, 0($s0)
	blt	$s5, $s3, newMin
	c1:
	bgt	$s5, $s4, newMax	
	c2:

	addi	$s2, $s2, 1 # i++
	addi	$s0, $s0, 4 # passing next index
j while 

newMin:
	move $s3, $s5
j c1

newMax:
	move $s4, $s5
j c2


complete:
	move	$v0, $s3 # put return value the min
	move	$v1, $s4 # put return value the max
deAlloc:
# Deallocate/ free memory in stack 
	sw	$s5, 0($sp)
	sw	$s4, 4($sp)
	sw	$s3, 8($sp)
	sw	$s2, 12($sp)
	sw	$s1, 16($sp)
	sw	$s0, 20($sp)
	addi	$sp, $sp, 24
	jr	$ra 	#Return from FindMinMax

emptyArray:
	# print emptyMsg
	li $v0, 4
	la $a0, emptyArrayMsg
	syscall
	# load sentienel values
	li	$v0, -72
	li	$v1, -72
	j deAlloc
#===========================================================

.data
array: 		.word 72, 34, 48, 97, 48, 34, 72
arraySize: 	.word 7
arraySpace:	.asciiz ", "
messageYes:     .asciiz "\nThe array is symmetric...\n"
messageNo:      .asciiz "\nThe array is NOT symmetric...\n"
maxPrompt:	.asciiz " <-is maximum "
minPrompt:	.asciiz " <-is minimum "
empty:		.asciiz "\n"
emptyArrayMsg:	.asciiz "\nThe array is empty no min/max..."

# ----------------PART 1 END-------------------------------------------------------------------------------------------
# ----------------PART 2 START-----------------------------------------------------------------------------------------
# Subprogram to reverse the order of bits in a decimal as a result.
.text
	lw	$t0, num
	
	# print message
	li	$v0, 4
	la	$a0, msgBegin 
	syscall 
	# Print number as hex from
	li 	$v0, 34
	add 	$a0, $zero, $t0
	syscall

	# prepare the argument
	move	$a0, $t0
	jal	reverseBits # call subprogram
	
	move	$t1, $v0    # get the return value
	
	
	# print message
	li	$v0, 4
	la	$a0, msgEnd 
	syscall
	# Print number as hex from
	li 	$v0, 34
	add 	$a0, $zero, $t1
	syscall
	#end program
	li	$v0, 10
		syscall
#-------------------------------------------------------------------------------------------------
# Subprogram to reverse bits
# @arg $a0: the number to be reversed
# @return $v0: the bitwise reversed number
reverseBits:
	# allocate memory
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$s4, 0($sp)
	
	
	move	$s0, $a0 # get the number
	li	$s1, 1   # for comparing with the last bit
	add	$s2, $zero, $zero # for operation with last bit
	li	$s3, 31  # counter
	add	$s4, $zero, $zero # to hold final result	
	
	
for: 
	and	$s2, $s0, $s1	# in order to put last bit into result 
	srl	$s0, $s0, 1	# >> $s0 (to get in next bit)
	or	$s4, $s4, $s2	# or operat≈üon to merge the newest bit to the result	
	beq	$s3, $zero, exit
	sll	$s4, $s4, 1	# << $s4
	subi	$s3, $s3, 1	# i--
	j	for 
	
	
exit:
	move	$v0, $s4	
	# deallocate memory
	lw	$s4, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	
	jr	$ra
#-------------------------------------------------------------------------------------------------

.data
num:		.word 	4160749730
msgBegin:	.asciiz "\nThe number before reverse operation: "
msgEnd:		.asciiz "\nThe number after reverse operation : "

# ----------------PART 2 END-------------------------------------------------------------------------------------------
