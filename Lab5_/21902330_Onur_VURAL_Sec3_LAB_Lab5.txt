CS224
Lab No.5
Section No.3
Nurettin Onur VURAL
21902330

//-------------LAB-5 SV DESIGN----START--------------------

`timescale 1ns / 1ps
// Code your design here
// Define pipes that exist in the PipelinedDatapath. 
// The pipe between Writeback (W) and Fetch (F), as well as Fetch (F) and Decode (D) is given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clear, clk, reset,
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk, posedge reset)
                  if(reset)
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else if(EN)
                        begin
                          if(clear) // Can clear only if the pipe is enabled, that is, if it is not stalling.
                            begin
                        	   instrD <= 0;
                        	   PcPlus4D <= 0;
                            end
                          else
                            begin
                        		instrD<=instr;
                        		PcPlus4D<=PcPlus4F;
                            end
                        end
                
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// ~StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk, posedge reset)
                    if(reset)
                        PCF <= 0;
                    else if(EN)
                        PCF <= PC;
endmodule

module PipeDtoE(input logic[31:0] RD1, RD2, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                input logic[2:0] ALUControlD,
                input logic clear, clk, reset,
                output logic[31:0] RsData, RtData, SignImmE,
                output logic[4:0] RsE, RtE, RdE, 
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                output logic[2:0] ALUControlE);

        always_ff @(posedge clk, posedge reset)
          if(reset || clear)
                begin
                // Control signals
                RegWriteE <= 0;
                MemtoRegE <= 0;
                MemWriteE <= 0;
                ALUControlE <= 0;
                ALUSrcE <= 0;
                RegDstE <= 0;
                
                // Data
                RsData <= 0;
                RtData <= 0;
                RsE <= 0;
                RtE <= 0;
                RdE <= 0;
                SignImmE <= 0;
                end
            else
                begin
                // Control signals
                RegWriteE <= RegWriteD;
                MemtoRegE <= MemtoRegD;
                MemWriteE <= MemWriteD;
                ALUControlE <= ALUControlD;
                ALUSrcE <= ALUSrcD;
                RegDstE <= RegDstD;
                
                // Data
                RsData <= RD1;
                RtData <= RD2;
                RsE <= RsD;
                RtE <= RtD;
                RdE <= RdD;
                SignImmE <= SignImmD;
                end

endmodule

module PipeEtoM(input logic clk, reset, 
                input logic RegWriteE, MemtoRegE, MemWriteE, 
                input logic [31:0] ALUOutE, WriteDataE, input logic [4:0] WriteRegE,
                
                output logic RegWriteM, MemtoRegM, MemWriteM,
                output logic [31:0] ALUOutM, WriteDataM, output logic [4:0] WriteRegM);
  				
  
        always_ff @(posedge clk, posedge reset)
          if(reset)
            begin
            // control signals
            RegWriteM <= 0;
            MemtoRegM <= 0;
            MemWriteM <= 0;
             
            // data
            ALUOutM <= 0;
            WriteDataM <= 0;
            WriteRegM <= 0;  
            end
  		 else
         	begin
            // control signals
            RegWriteM <= RegWriteE;
            MemtoRegM <= MemtoRegE;
            MemWriteM <= MemWriteE;
             
            // data
            ALUOutM <= ALUOutE;
            WriteDataM <= WriteDataE;
            WriteRegM <= WriteRegE;
            end
                  
endmodule

module PipeMtoW(input logic clk, reset,
                input logic RegWriteM, MemtoRegM,
                input logic [31:0] ReadDataM, ALUOutM, input logic [4:0] WriteRegM,
                output logic RegWriteW, MemtoRegW,
                output logic [31:0] ReadDataW, ALUOutW, output logic [4:0] WriteRegW
               	);
  
  		always_ff @(posedge clk, posedge reset)
          if(reset)
            begin
            // control signals
            RegWriteW <= 0;
            MemtoRegW <= 0;
              
            //data
            ReadDataW <= 0;
            ALUOutW <= 0;
            WriteRegW <= 0;
            end
  		  else
            begin
            // control signals
            RegWriteW <= RegWriteM;
            MemtoRegW <= MemtoRegM;
              
            //data
            ReadDataW <= ReadDataM;
            ALUOutW <= ALUOutM;
            WriteRegW <= WriteRegM; 
            end
                
endmodule



// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmD to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PcBranchD
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// *******************************************************************************

module datapath (input  logic clk, reset,
                input  logic[2:0]  ALUControlD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
                 output logic [31:0] instrF,		
                 output logic [31:0] instrD, PC, PCF,
                output logic PcSrcD,                 
                output logic [31:0] ALUOutE, WriteDataE,
                output logic [1:0] ForwardAE, ForwardBE,
                 output logic ForwardAD, ForwardBD); // Add or remove input-outputs if necessary

	// ********************************************************************
	// Here, define the wires that are needed inside this pipelined datapath module
	// ********************************************************************
  
  	//* We have defined a few wires for you
    logic [31:0] PcSrcA, PcSrcB, PcBranchD, PcPlus4F;	
  	logic StallF;
  
	//* You should define others down below
  
  	// D STAGE
  	logic StallD;
    logic [31:0] PcPlus4D;
    logic[31:0] rd1D, rd2D;
    logic[31:0] SignImmD, SignImmD_mult4;
    logic [31:0] compSrcA, compSrcB;
  	logic EqualD; 
    logic[4:0] RsD, RtD, RdD;
  
  	// EX STAGE
  	logic FlushE;
  	logic[4:0] RsE, RtE, RdE;
 	logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE;
  	logic[2:0] ALUControlE;
    logic [31:0] SrcAE, SrcBE;
    logic [4:0] WriteRegE;
  	logic[31:0] RsData, RtData, SignImmE;
  
  	// M STAGE
  	logic RegWriteM, MemtoRegM, MemWriteM;
    logic [31:0] ALUOutM, WriteDataM;
    logic [4:0] WriteRegM;
    logic [31:0] ReadDataM;
  
    // WB STAGE
  	logic RegWriteW, MemtoRegW;
  	logic [31:0] ReadDataW, ALUOutW;
    logic [4:0] WriteRegW;
  	logic[31:0] ResultW;
  	logic zero;
	// ********************************************************************
	// Instantiate the required modules below in the order of the datapath flow.
	// ********************************************************************
	assign RsD = instrD[25:21];
    assign RtD = instrD[20:16];
    assign RdD = instrD[15:11];
  
  	//* We have provided you with some part of the datapath
    
  	// Instantiate PipeWtoF
  	PipeWtoF pipe1(PC,
                ~StallF, clk, reset,
                PCF);
  
  	// Do some operations
    //adder a1(PCF, 32'b0000_0000_0000_0000_0000_0000_0000_0100, PcPlus4F);
    //mux2 #(32) pc_mux(PcPlus4F, PcBranchD, PcSrcD, PC);
  	
    assign PcPlus4F = PCF + 4;
    assign PcSrcB = PcBranchD;
	assign PcSrcA = PcPlus4F;
  	mux2 #(32) pc_mux(PcSrcA, PcSrcB, PcSrcD, PC);
    

    imem im1(PCF[7:2], instrF);
    
  	// Instantiate PipeFtoD
    //PipeFtoD(input logic[31:0] instr, PcPlus4F,input logic EN, clear, clk, reset,output logic[31:0] instrD, PcPlus4D);
    PipeFtoD pipe2(instrF, PcPlus4F, ~StallD, PcSrcD, clk, reset, instrD, PcPlus4D);
    //regfile (input    logic clk, reset, we3, input    logic[4:0]  ra1, ra2, wa3, input    logic[31:0] wd3, output   logic[31:0] rd1, rd2);
    regfile rf(clk, reset, RegWriteW, instrD[25:21], instrD[20:16],  WriteRegW, ResultW, rd1D, rd2D);
  
  	// Do some operations
    /*
  	module signext (input  logic[15:0] a, output logic[31:0] y);
    module sl2 (input  logic[31:0] a, output logic[31:0] y);
    module adder (input  logic[31:0] a, b,output logic[31:0] y);
    */
    
    signext se( instrD[15:0], SignImmD);
    sl2  mult4(SignImmD, SignImmD_mult4);
    adder a2(SignImmD_mult4, PcPlus4D, PcBranchD);
  
    mux2 #(32) compSrc1(rd1D, ALUOutM, ForwardAD, compSrcA); 
    mux2 #(32) compSrc2(rd2D, ALUOutM, ForwardBD, compSrcB);
  		
    //module comp_eq_32(input logic [31:0] a, b, output logic y);
    comp_eq_32 zeroComp(compSrcA, compSrcB, EqualD);
  	assign PcSrcD = BranchD & EqualD;
  
  	// Instantiate PipeDtoE
  
  	/*
    PipeDtoE(input logic[31:0] RD1, RD2, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                input logic[2:0] ALUControlD,
                input logic clear, clk, reset,
                output logic[31:0] RsData, RtData, SignImmE,
                output logic[4:0] RsE, RtE, RdE, 
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                output logic[2:0] ALUControlE);
    */
  PipeDtoE pipe3(rd1D, rd2D, SignImmD, RsD, RtD, RdD,
                 RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, ALUControlD, FlushE, clk, reset,
                 RsData, RtData, SignImmE, RsE, RtE, RdE, RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE, ALUControlE);
  
  	// Do some operations
    mux2 #(5) writeReg_mux(RtE, RdE, RegDstE, WriteRegE);
 
  
  	mux4 #(32) ALUSrcA_muxSOURCE1(RsData, ResultW, ALUOutM, 0, ForwardAE, SrcAE);
  	
  	mux4 #(32) ALUSrcB_muxSOURCE2_1(RtData, ResultW, ALUOutM, 0, ForwardBE, WriteDataE);
  	mux2 #(32) ALUSrcB_muxSORUCE2_2(WriteDataE, SignImmE, ALUSrcE, SrcBE);
  	
  	alu arithm_logic_unit(SrcAE, SrcBE, ALUControlE,  ALUOutE, zero);

  	// Instantiate PipeEtoM
  	/*
    PipeEtoM(input logic clk, reset, 
                input logic RegWriteE, MemtoRegE, MemWriteE, 
                input logic [31:0] ALUOutE, WriteDataE, input logic [4:0] WriteRegE,
                
                output logic RegWriteM, MemtoRegM, MemWriteM,
                output logic [31:0] ALUOutM, WriteDataM, output logic [4:0] WriteRegM);
    
    */
  	PipeEtoM pipe4(clk, reset, RegWriteE, MemtoRegE, MemWriteE, ALUOutE, WriteDataE, WriteRegE,
					RegWriteM, MemtoRegM, MemWriteM, ALUOutM, WriteDataM, WriteRegM);
  	// Do some operations
    //module dmem (input  logic        clk, we, input  logic[31:0]  a, wd, output logic[31:0]  rd);
    dmem data_mem(clk, MemWriteM, ALUOutM, WriteDataM, ReadDataM);
  	// Instantiate PipeMtoW
  	/*
    module PipeMtoW(input logic clk, reset,
                input logic RegWriteM, MemtoRegM
                input logic [31:0] ReadDataM, ALUOutM, input logic [4:0] WriteRegM,
                output logic RegWriteW, MemtoRegW,
                output logic [31:0] ReadDataW, ALUOutW, output logic [4:0] WriteRegW
               	);
    
    */
  PipeMtoW pipe5(clk, reset, RegWriteM, MemtoRegM, ReadDataM, ALUOutM, WriteRegM, RegWriteW, MemtoRegW, ReadDataW, ALUOutW, WriteRegW);
  	// Do some operations
  mux2 #(32) resultMux(ALUOutW, ReadDataW, MemtoRegW, ResultW);
  
  
  	HazardUnit hu( RegWriteW, BranchD, WriteRegW, WriteRegE,RegWriteM,MemtoRegM,WriteRegM, RegWriteE,MemtoRegE, RsE,RtE, RsD,RtD, 			                             ForwardAE,ForwardBE, FlushE,StallD,StallF,ForwardAD, ForwardBD
                 ); // Add or remove input-outputs if necessary

endmodule

module HazardUnit( input logic RegWriteW, BranchD,
                input logic [4:0] WriteRegW, WriteRegE,
                input logic RegWriteM,MemtoRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF,ForwardAD, ForwardBD
                 ); // Add or remove input-outputs if necessary
       
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
  	logic lwstall, branchstall;
  	always_comb 
      begin
      // forwarding logic
      // Source A (rs)
        if   ((rsE != 5'b0) & (rsE == WriteRegM) & RegWriteM)
			ForwardAE = 2'b10;       
        else if ( (rsE != 5'b0) & (rsE == WriteRegW) & RegWriteW)
			ForwardAE = 2'b01; 
	  else 
			ForwardAE = 2'b00;
           
        
	  // Source B (rt)
        if   ((rtE != 5'b0) & (rtE == WriteRegM) & RegWriteM)
			ForwardBE = 2'b10;
        else if ( (rtE != 5'b0) & (rtE == WriteRegW) & RegWriteW)
			ForwardBE = 2'b01;
      else 
			ForwardBE = 2'b00;
        
      ForwardAD = (rsD != 0) & (rsD == WriteRegM) & RegWriteM;
      ForwardBD = (rtD != 0) & (rtD == WriteRegM) & RegWriteM;
	
      //stall - flush
        lwstall = ((rsD == rtE) | (rtD == rtE)) & MemtoRegE;
        branchstall = (BranchD & RegWriteE & (WriteRegE == rsD | WriteRegE == rtD)) 
        			| (BranchD & MemtoRegM & (WriteRegM == rsD | WriteRegM == rtD));
        StallF = lwstall | branchstall;
        StallD = lwstall | branchstall;
        FlushE = lwstall | branchstall;
        
      end
  	
  
endmodule


// You can add some more logic variables for testing purposes
// but you cannot remove existing variables as we need you to output 
// these values on the waveform for grading
module top_mips (input  logic        clk, reset,
             output  logic[31:0]  instrF,
             output logic[31:0] PC, PCF,
             output logic PcSrcD,
             output logic MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             output logic [2:0]  alucontrol,
             output logic [31:0] instrD, 
             output logic [31:0] ALUOutE, WriteDataE,
             output logic [1:0] ForwardAE, ForwardBE,
                 output logic ForwardAD, ForwardBD);


	// ********************************************************************
	// Below, instantiate a controller and a datapath with their new (if modified) signatures
	// and corresponding connections.
	// ********************************************************************
    controller cont(instrD[31:26], instrD[5:0],
        		 MemtoRegD,  MemWriteD,   ALUSrcD,  RegDstD, RegWriteD, alucontrol, BranchD);
      
      
      
    datapath dpath(clk, reset, alucontrol, RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
                   instrF, instrD, PC, PCF, PcSrcD, ALUOutE, WriteDataE, ForwardAE, ForwardBE, ForwardAD, ForwardBD);
  
endmodule


// External instruction memory used by MIPS
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-ressable 
	/*
    always_comb
	   case ({addr,2'b00})		   	

//		address		instruction
         
//		-------		-----------
       
	   8'h00: instr = 32'h20080007;
       8'h04: instr = 32'h20090005;
       8'h08: instr = 32'h200a0000;
       8'h0c: instr = 32'h210b000f;
       8'h10: instr = 32'h01095020;
       8'h14: instr = 32'h01095025;
       8'h18: instr = 32'h01095024;
       8'h1c: instr = 32'h01095022;
       8'h20: instr = 32'h0109502a;
       8'h24: instr = 32'had280002;
       8'h28: instr = 32'h8d090000;
       8'h2c: instr = 32'h1100fff5;
       8'h30: instr = 32'h200a000a;
       8'h34: instr = 32'h2009000c;
       default:  instr = {32{1'bx}};	// unknown address
	   endcase
  	*/
  
  
  
  
//NO HAZARD -------------------------------------------------------- 
/*
 
  
	always_comb
	   case ({addr,2'b00})		   	

//		address		instruction
//		-------		-----------
	    8'h00: instr = 32'h20100002;
		8'h04: instr = 32'h20110007;
		8'h08: instr = 32'h20130004;
		8'h0c: instr = 32'h20140005;
		8'h10: instr = 32'h02308020;
		8'h14: instr = 32'h00008820;
		8'h18: instr = 32'h02749022;
		8'h1c: instr = 32'h8c080008;
		8'h20: instr = 32'h014b4824;
		8'h24: instr = 32'hac0c0008;
		8'h28: instr = 32'h22720005;

       default:  instr = {32{1'bx}};	// unknown address
	   endcase  
 */   
  
//-------------------------------------------------------------------------------------------  
  
  
// COMPUTE USE HAZARD------------------------------------------------  

/*  
	always_comb
	   case ({addr,2'b00})		   	

//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20110002;
        8'h04: instr = 32'h20120007;
        8'h08: instr = 32'h20140006;
        8'h0c: instr = 32'h02328020;
        8'h10: instr = 32'h02149820;
        8'h14: instr = 32'h0260a022;
        8'h18: instr = 32'h22750006;

	  
       default:  instr = {32{1'bx}};	// unknown address
	   endcase  
*/    
  
//-------------------------------------------------------------------------------------------  
  
  
// LOAD USE HAZARD---------------------------------------------------------  
/*
  
	always_comb
	   case ({addr,2'b00})		   	

//		address		instruction
//		-------		-----------
        8'h00: instr = 32'h20110001;
        8'h04: instr = 32'h00004020;
        8'h08: instr = 32'h00004820;
        8'h0c: instr = 32'h00005020;
        8'h10: instr = 32'h8e300004;
        8'h14: instr = 32'h02709020;
        8'h18: instr = 32'h02149822;

	  
       default:  instr = {32{1'bx}};	// unknown address
	   endcase  
    
*/ 
//-------------------------------------------------------------------------------------------    
  
  
// LOAD STORE HAZARD---------------------------------------------------------    
/*
  
	always_comb
	   case ({addr,2'b00})		   	

//		address		instruction
//		-------		-----------
        8'h00: instr = 32'h20110001;
        8'h04: instr = 32'h00004020;
        8'h08: instr = 32'h00004820;
        8'h0c: instr = 32'h00005020;
        8'h10: instr = 32'h8e300004;
        8'h14: instr = 32'had100008;

	  
       default:  instr = {32{1'bx}};	// unknown address
	   endcase  
*/
//-------------------------------------------------------------------------------------------  
  
  
 
// BRANCH HAZARD-----------------------------------------------------------------------------
/*
  
	always_comb
	   case ({addr,2'b00})		   	

//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20080007;
        8'h04: instr = 32'h10000004;
        8'h08: instr = 32'h00004822;
        8'h0c: instr = 32'h00005025;
        8'h10: instr = 32'h01005820;
        8'h14: instr = 32'h01006025;
        8'h18: instr = 32'h00006020;
        8'h1c: instr = 32'h00005820;
        8'h20: instr = 32'h00005020;
        8'h24: instr = 32'h00004820;

	  
       default:  instr = {32{1'bx}};	// unknown address
	   endcase 
  */
  		 
  		 
        always_comb
	   case ({addr,2'b00}) 
        8'h00: instr =	32'h20080007;
        8'h04: instr =	32'h20090005;
        8'h08: instr =	32'h01095020;
        8'h0c: instr =	32'had280002;
        8'h10: instr =	32'h8d090000;
        8'h14: instr =	32'h11000001;
        8'h18: instr =	32'h200a000a;
        8'h1c: instr =	32'h2009000c;
        8'h20: instr =	32'h20080005;
        8'h24: instr =	32'h01084820;
        8'h28: instr =	32'h01095020;
        8'h2c: instr =	32'h20090006;
        8'h30: instr =	32'h20040001;
        8'h34: instr =	32'h20050002;
        8'h38: instr =	32'had280000;
        8'h3c: instr =	32'h8d090001;
        8'h40: instr =	32'h11280001;
        8'h44: instr =	32'h01245020;
        8'h48: instr =	32'h01255022;
        8'h4c: instr =	32'h20090003;
        8'h50: instr =	32'h112A0002;
        8'h54: instr =	32'h20090005;
        8'h58: instr =	32'h21290006;
        8'h5c: instr =	32'h20040000;
        8'h60: instr =	32'h20050000;
        8'h64: instr =	32'hac090000;
         default: instr = {32{1'bx}};
       endcase
  


  
endmodule


// 	***************************************************************************
//	Below are the modules that you shouldn't need to modify at all..
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

  maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] aluop );
  logic [7:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 8'b11000010; // R-type
      6'b100011: controls <= 8'b10100100; // LW
      6'b101011: controls <= 8'b00101000; // SW
      6'b000100: controls <= 8'b00010001; // BEQ
      6'b001000: controls <= 8'b10100000; // ADDI
      default:   controls <= 8'bxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on falling edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;
  	 else if(reset)
       for (int i=0; i<32; i++) rf[i] = {32{1'b0}};	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s[1] ? ( s[0] ? d3 : d2 ) : (s[0] ? d1 : d0); 
endmodule

// eq comparator
module comp_eq_32(input logic [31:0] a, b, output logic y);
  /*
  logic [31:0] result;
  assign result = a - b;
  assign y = (result == 0) ? 1'b1 : 1'b0;
  */
  
  assign y = (a == b) ? 1'b1 : 1'b0; 
endmodule



//-------------LAB-5 SV DESIGN------END---------------------

//-------------LAB-5 SV TESTBENCH----START--------------------

// Code your testbench here
// or browse Examples
`timescale 1ns / 1ps

module mips_tb;

  logic clk, reset;
  logic[31:0]  instrF;
  logic[31:0] PC, PCF;
  logic PcSrcD;
  logic MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD;
  logic [2:0]  alucontrol;
  logic [31:0] instrD; 
  logic [31:0] ALUOutE, WriteDataE;
  logic [1:0] ForwardAE, ForwardBE;
  logic ForwardAD, ForwardBD;  
            

  top_mips mips_tb(.clk(clk), .reset(reset), .instrF(instrF), .PC(PC), .PCF(PCF), .PcSrcD(PcSrcD),
                   .MemWriteD(MemWriteD), .MemtoRegD(MemtoRegD), .ALUSrcD(ALUSrcD), .BranchD(BranchD), 				                      .RegDstD(RegDstD), .RegWriteD(RegWriteD), .alucontrol(alucontrol),
                   .instrD(instrD), .ALUOutE(ALUOutE), .WriteDataE(WriteDataE), .ForwardAE(ForwardAE),  .ForwardBE(ForwardBE),
                   .ForwardAD(ForwardAD), .ForwardBD(ForwardBD));

  
 //begin test
 initial begin
$dumpfile("dump.vcd");
$dumpvars(1);
end
  
initial begin
clk = 0; reset = 1;
#1;
reset = 0;

for(int i = 0; i < 100; i++)
begin
#10; clk = ~clk;
end
end
 
endmodule


//-------------LAB-5 SV TESTBENCH------END---------------------